A format string is a text string that contains placeholders for values.
These placeholders begin with a '{', contain the index of the value, and end with a '}'.
For example, the format string "Values: {1} ({2})" with the values "First" and "My second val" will produce "Values: First (My second val)".
Format strings can contain placeholders in any order and include multiple occurrences of the same placeholder.
When setting a format string from the command line that contains spaces, surround the entire string with double quotes (").

In version 2.14.0 or newer, value indices can be meaningful named tags.
For example: "--title-format '{user-name-colored}{at-symbol-colored}{host-name-colored}'" is equivalent to "--title-format '{6}{7}{8}'".
See "fastfetch -h title-format" for all supported tags.

In version 2.17.0 or newer, a truncation length can be specified using the syntax '{arg:trunc-length}'.
For example: "--title-format '{user-name:5}'" will truncate the user name to a 5-character string.
If 'trunc-length' is negative, an ellipsis (…) will be appended when the string is truncated.
Note: String length is counted in raw bytes. Multi-byte Unicode characters and ANSI escape codes are not taken into account.

In version 2.23.0 or newer, '<' or '>' can be used instead of ':' to set left or right padding.
For example: "--title-format '{user-name<20}'" will generate `<user-name>         ` (left-aligned with spaces),
while "--title-format '{user-name>20}'" will generate `         <user-name>` (right-aligned with spaces).

In version 2.24.0 or newer, '{~startIndex,endIndex}' can be specified to slice a string. Negative indices count backward from the end of the string.
If an index is omitted, 0 is used by default. For example, '{~,0}', '{~0,}', and '{~,}' are all equivalent to '{~0,0}' and will generate an empty string.
If ',endIndex' is omitted or greater than the string length, the length of the string is used instead.

In version 2.36.0 or newer, '{$NUM}' can be used to reference a constant defined in `display.constants`, and '{$ENV_VAR}' can be used to reference an environment variable.

If a value index is missing (empty placeholder: "{}"), an internal counter automatically assigns the next sequential value.
This means that the format string "Values: {1} ({2})" is equivalent to "Values: {} ({})".
Note that this counter only increments for empty placeholders, so the format string "{2} {} {}" will contain the second value, then the first, and then the second again.

To simplify formatting, a double open curly brace ("{{") will be printed as a single open curly brace ('{') and not be treated as the beginning of a placeholder.
If a value index is incorrectly formatted or references a non-existent value, it will be printed as-is with the curly braces preserved.
If the final placeholder is not closed, it will be treated as if it were closed at the end of the format string.

To conditionally print content only when a variable is set, use "{?<index>} ... {?}".
For example, to print a second value only if it is set, use "{?2} Second value: {2}{?}".
If a "{?}" is found without a corresponding opener, it is printed as-is.

To conditionally print content only when a variable is NOT set, use "{/<index>} ... {/}" (same syntax as above, but with '/' instead of '?').
For example, to print a fallback for a second value if it is not set, use "{?2}{2}{?}{/2}Second value fallback{/}".

To terminate formatting at any point in the format string, use "{-}".

To apply color to text, start a placeholder with '#' followed by Linux terminal color codes.
The escape sequence "\033[" at the start and 'm' at the end are automatically added, so you don't need to include them.
"{#}" is equivalent to "{#0}" and resets all formatting to normal.
For example, to print text in pink and underlined, use "{#4;35}...{#}". Named formats like "{#underline_magenta}" are also supported.
See `fastfetch -h color` for details about supported color codes.
Information about color code meanings can be found at: https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_(Select_Graphic_Rendition)_parameters.
The supported escape codes and their appearance depend on your terminal.

If a format string evaluates to an empty value, the entire line will be omitted from the output.
You can use this behavior to disable specific outputs, for example: "--host-format " " will disable host output.
Note that "--host-format ""' (empty string) would be treated as not set, and therefore the built-in host format would be used.

Format strings can also be used to set fixed values—simply use a string without any placeholders.
For example, when running in headless mode, you could use "--display-format Preferred".
